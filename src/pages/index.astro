---
import Layout from "../layouts/Layout.astro";
import WordsList from "../components/WordsList";
---

<Layout title="Vocab Nest - Words">
    <main class="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div class="mb-8">
            <h2 class="text-3xl font-bold mb-4">Your Word Collection</h2>
            <p class="text-foreground/75 mb-6">
                Build your vocabulary by adding new words and creating example
                sentences.
            </p>
            <!-- Add New Word Form -->
            <div
                class="bg-background rounded-xl shadow-sm border border-input p-6 mb-8"
            >
                <h3 class="text-xl font-semibold mb-4">Add New Word</h3>
                <form id="add-word-form" class="space-y-4">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label
                                for="word-input"
                                class="block text-sm font-medium mb-2"
                                >Word</label
                            >
                            <input
                                type="text"
                                id="word-input"
                                required
                                class="w-full px-4 py-2 border border-input rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-primary/70 focus-ring"
                                placeholder="Enter a new word"
                            />
                        </div>
                        <div>
                            <label
                                for="definition-input"
                                class="block text-sm font-medium mb-2"
                                >Definition</label
                            >
                            <input
                                type="text"
                                id="definition-input"
                                required
                                class="w-full px-4 py-2 border border-input rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-primary/70 focus-ring"
                                placeholder="Enter definition"
                            />
                        </div>
                        <div>
                            <label
                                for="example-input"
                                class="block text-sm font-medium mb-2"
                                >Example</label
                            >
                            <input
                                type="text"
                                id="example-input"
                                class="w-full px-4 py-2 border border-input rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent text-primary/70 focus-ring"
                                placeholder="Enter example (optional)"
                            />
                        </div>
                    </div>
                    <button
                        type="submit"
                        class="bg-background border border-input hover:bg-accent hover:text-accent-foreground text-foreground shadow-sm px-8 py-2 rounded-sm font-medium text-sm transition-colors duration-200 cursor-pointer"
                    >
                        Add Word
                    </button>
                </form>
            </div>

            <WordsList id="words-list" class:list="" client:load />
            <div id="no-words" class="text-center py-12">
                <div class="text-primary text-6xl mb-4">ðŸ“š</div>
                <h3 class="text-xl font-semibold mb-2">No words yet</h3>
                <p class="text-foreground">
                    Add your first word to get started!
                </p>
            </div>
        </div>
    </main>
</Layout>

<script>
    console.log("Current word list: " + localStorage.getItem("words"));
    // localStorage.removeItem("words");

    const form = document.getElementById("add-word-form");
    form?.addEventListener("submit", (e) => {
        e.preventDefault();

        const word = document.getElementById("word-input")?.value;
        const definition = document.getElementById("definition-input")?.value;
        const example = document.getElementById("example-input")?.value;
        let wordObj = {
            definition: definition,
            counter: 1,
            example: example == "" ? "No example provided." : example,
        };

        const words = localStorage.getItem("words");
        if (!words) {
            const words = Object();
            words[word] = wordObj;
            localStorage.setItem("words", JSON.stringify(words));
            console.log(
                "No words found. Created new words object with new word and its definition."
            );
            displayWordsList();
        } else {
            // Check if we have the word, if so, increment the counter, otherwise, create a new one.
            const wordsObj = JSON.parse(words);
            if (!Object.hasOwn(wordsObj, word)) {
                wordsObj[word] = wordObj;
            } else {
                const counter = wordsObj[word]["counter"];
                wordsObj[word]["counter"] = counter + 1;

                if (
                    wordsObj[word]["example"] === "No example provided." &&
                    example !== ""
                ) {
                    wordsObj[word]["example"] = example;
                }
            }
            localStorage.setItem("words", JSON.stringify(wordsObj));
            console.log(wordsObj);
        }
    });

    const wordsList = document.getElementById("words-list");
    // I want to not show anything, unless there are words, if so, then remove the hidden class and show them, otherwise add the hidden class. Since this will run at the beginning, initialize it, and then call function to show words when the form gets called.
    const displayWordsList = () => {
        console.log("Displaying words list.");

        if (wordsList?.classList.contains("hidden")) {
            wordsList.classList.remove("hidden");
        }
    };

    const words = localStorage.getItem("words");
</script>

<!-- <script>
  // Words page functionality
  function initWordsPage() {
    const addWordForm = document.getElementById('add-word-form');
    const wordsList = document.getElementById('words-list');
    const noWordsDiv = document.getElementById('no-words');
    const exampleModal = document.getElementById('example-modal');
    
  
    
    // Render words
    function renderWords() {
      const words = window.wordStore.getAllWords();
      
      if (words.length === 0) {
        wordsList.innerHTML = '';
        noWordsDiv?.classList.remove('hidden');
        return;
      }
      
      noWordsDiv?.classList.add('hidden');
      
      wordsList.innerHTML = words.map(word => `
        <div class="word-card bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6 animate-fade-in">
          <div class="flex justify-between items-start mb-3">
            <h3 class="text-xl font-semibold text-blue-600 dark:text-blue-400">${word.word}</h3>
            <span class="bg-blue-100 dark:bg-blue-900 text-blue-800 dark:text-blue-200 px-2 py-1 rounded-full text-sm font-medium">
              ${word.counter}
            </span>
          </div>
          <p class="text-gray-600 dark:text-gray-400 mb-4">${word.definition}</p>
          
          ${word.example ? `
            <div class="bg-gray-50 dark:bg-gray-700 rounded-lg p-3 mb-4">
              <p class="text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">Example:</p>
              <p class="text-gray-900 dark:text-gray-100 italic">${word.example}</p>
            </div>
          ` : `
            <button class="add-example-btn bg-green-100 dark:bg-green-900 hover:bg-green-200 dark:hover:bg-green-800 text-green-700 dark:text-green-300 px-4 py-2 rounded-lg text-sm font-medium transition-colors duration-200 focus-ring" data-word-id="${word.id}">
              Add Example
            </button>
          `}
          
          <button class="delete-word-btn mt-2 text-red-500 hover:text-red-700 text-sm font-medium transition-colors duration-200 focus-ring" data-word-id="${word.id}">
            Delete
          </button>
        </div>
      `).join('');
      
      // Add event listeners for dynamically created buttons
      document.querySelectorAll('.add-example-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const wordId = parseInt(e.target.dataset.wordId);
          openExampleModal(wordId);
        });
      });
      
      document.querySelectorAll('.delete-word-btn').forEach(btn => {
        btn.addEventListener('click', (e) => {
          const wordId = parseInt(e.target.dataset.wordId);
          if (confirm('Are you sure you want to delete this word?')) {
            window.wordStore.deleteWord(wordId);
            renderWords();
          }
        });
      });
    }
    
    // Example modal functions
    function openExampleModal(wordId) {
      const word = window.wordStore.getWordById(wordId);
      if (word) {
        document.getElementById('example-word-id').value = wordId;
        document.getElementById('example-input').value = '';
        exampleModal?.classList.remove('hidden');
        document.getElementById('example-input')?.focus();
      }
    }
    
    function closeExampleModal() {
      exampleModal?.classList.add('hidden');
    }
    
    // Example modal event listeners
    document.getElementById('cancel-example')?.addEventListener('click', closeExampleModal);
    exampleModal?.addEventListener('click', (e) => {
      if (e.target === exampleModal) closeExampleModal();
    });
    
    document.getElementById('example-form')?.addEventListener('submit', (e) => {
      e.preventDefault();
      const wordId = parseInt(document.getElementById('example-word-id').value);
      const example = document.getElementById('example-input').value.trim();
      
      if (window.wordStore.addExample(wordId, example)) {
        renderWords();
        closeExampleModal();
      }
    });
    
    // Initial render
    renderWords();
    
    // Listen for changes
    window.wordStore.addListener(renderWords);
  }
  
  // Initialize when DOM is loaded
  document.addEventListener('DOMContentLoaded', initWordsPage);
</script> -->
